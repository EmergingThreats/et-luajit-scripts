--[[
#*************************************************************
# Copyright (c) 2003-2015, Emerging Threats/Proofpoint
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
# following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this list of conditions and the following
# disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
# following disclaimer in the documentation and/or other materials provided with the distribution.
# * Neither the name of the nor the names of its contributors may be used to endorse or promote products derived
# from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#*************************************************************
Detection for CVE-2015-3113
Darien Huss
--]]

local struct = require 'struct'
local bit = require 'bit'

function init(args)
	local needs = {}
	needs["http.response_body"] = tostring(true)
	return needs
end

function match(args)
	local t = tostring(args["http.response_body"])
	if t == nil then
		return 0
		--print ("no payload")
	end
	return common(t,0)
end

function common(t,verbose)
	local len = string.len(t)
	local offset = struct.unpack(">I4",string.sub(t,6,9))
	offset = offset + 4
	local tag_type
	local tmp_sound
	local soundformat
	local soundsize
	while offset + 1 < len do
		tag_type = string.byte(t,offset+1)
		tag_size = struct.unpack(">I3",string.sub(t,offset+2,offset+4))
		if tag_type == 8 then
			tmp_sound = string.byte(t,offset+12)
			soundformat = bit.rshift(bit.band(tmp_sound,240),4)
			soundsize = bit.rshift(bit.band(tmp_sound,2),1)
			if (soundformat == 4 or soundformat == 5 or soundformat == 6) and 
				soundsize == 0 and tag_size > 1024 then
				if verbose == 1 then print("Found possible CVE-2015-3113 in FLV") end
				return 1
			end
		end
		offset = offset + tag_size + 15
	end
	if verbose == 1 then print("Did not find anything suspicious...") end
	return 0
end

function run()
  local f = io.open(arg[1])
  local t = f:read("*all")
  f:close()
  common(t,1)
end